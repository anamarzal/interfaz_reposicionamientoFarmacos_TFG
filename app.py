import streamlit as st
import pandas as pd
import joblib
import os

# Estilo de la app
st.markdown("<h1 style='color: #f965e9;'>Predicci√≥n de nuevas indicaciones terap√©uticas para f√°rmacos ya comercializados.</h1>", unsafe_allow_html=True)
st.caption("Explora posibles nuevos usos terap√©uticos para f√°rmacos mediante modelos de machine learning, aplicando reposicionamiento farmacol√≥gico, " \
"que consiste en encontrar indicaciones alternativas para medicamentos ya existentes.")

st.markdown("---")

# Explicaci√≥n inicial mejorada
st.markdown("### üîç ¬øC√≥mo funciona esta aplicaci√≥n?")
st.write("""
Un **algoritmo de agrupamiento** es una t√©cnica que divide los f√°rmacos en grupos (llamados *clusters*) bas√°ndose en sus propiedades qu√≠micas y caracter√≠sticas similares.

Esto nos permite encontrar grupos de f√°rmacos que comparten patrones comunes, lo que ayuda a descubrir posibles nuevas indicaciones terap√©uticas para esos grupos.

Por eso, primero debes seleccionar el algoritmo con el que quieres agrupar los f√°rmacos, ya que cada uno organiza los datos de forma diferente y genera distintos clusters.

A continuaci√≥n, elige la indicaci√≥n terap√©utica que quieres predecir para un f√°rmaco espec√≠fico y comprueba si podr√≠a tener **potencial de reposicionamiento**.
""")

# Configuraci√≥n de modelos
config = {
    'MeanShift': {
        'Antibacterial': 'modelo_rf_meanshift_cluster0_antibacteriano.pkl',
        'Anti-Inflammatory': 'modelo_rf_meanshift_cluster0_antiinflamatorio.pkl',
        'Antineoplastic': 'modelo_rf_meanshift_cluster0_antineoplasico.pkl',
        'Antihypertensive': 'modelo_rf_meanshift_cluster0_antihipertensivo.pkl'
    },
    'KMeans': {
        'Antibacterial': {
            'Cluster 0': 'modelo_rf_kmeans_cluster0_antibacteriano.pkl',
            'Cluster 1': 'modelo_rf_kmeans_cluster1_antibacteriano.pkl'
        },
        'Antipsychotic': {
            'Cluster 2': 'modelo_rf_kmeans_cluster2_antipsicotico.pkl'
        }
    },
    'GMM': {
        'Antibacterial': {
            'Cluster 0': 'modelo_rf_gmm_cluster0_antibacteriano.pkl',
            'Cluster 1': 'modelo_rf_gmm_cluster1_antibacteriano.pkl'
        }
    }
}

# Cargar dataset √∫nico
df = pd.read_excel('farmacos_a_clasificar_normalizados.xlsx')

# Si quieres renombrar la columna aqu√≠, descomenta esta l√≠nea:
# df.rename(columns={'Indicacion1': 'Indicacion'}, inplace=True)

# Controles principales

# Primer selectbox: algoritmo
algoritmo = st.selectbox("üß¨ Selecciona el criterio de agrupamiento:", [""] + list(config.keys()))

if algoritmo:
    # Segundo selectbox o texto fijo seg√∫n algoritmo
    if algoritmo == 'GMM':
        indicacion = 'Antibacterial'
        st.markdown("**ü©∫ Indicaci√≥n disponible:** Antibacterial")
    else:
        indicaciones_disponibles = list(config[algoritmo].keys())
        indicacion = st.selectbox("ü©∫ ¬øPara qu√© indicaci√≥n quieres buscar nuevos candidatos?", [""] + indicaciones_disponibles)

    if algoritmo == 'GMM' or indicacion:
        st.markdown("---")

        # Filtrar dataset: eliminar f√°rmacos que ya tengan esa indicaci√≥n
        df_filtrado = df[df['Indicacion'] != indicacion].copy()
        df_filtrado['Display'] = df_filtrado['ChEMBL ID'] + ' ‚Äî ' + df_filtrado['Name'] + ' ‚Äî ' + df_filtrado['Indicacion']

        display_options = [""] + list(df_filtrado['Display'])
        selected_display = st.selectbox("üíä Selecciona un f√°rmaco:", display_options)

        selected_cluster = None

        if selected_display:
            selected_drug = df_filtrado[df_filtrado['Display'] == selected_display]['ChEMBL ID'].values[0]

            st.markdown("---")
            st.markdown("### üìä Datos b√°sicos del f√°rmaco seleccionado:")
            drug_data = df_filtrado[df_filtrado['ChEMBL ID'] == selected_drug][['Indicacion', 'Name', 'ChEMBL ID']]
            st.dataframe(drug_data)

            # Selecci√≥n de caracter√≠sticas para la predicci√≥n
            features = ['Molecular Weight', 'Targets', 'AlogP', 'Polar Surface Area', 'HBA', 'HBD',
                        '#RO5 Violations', '#Rotatable Bonds', 'QED Weighted', 'Aromatic Rings']
            X = df_filtrado[df_filtrado['ChEMBL ID'] == selected_drug][features]

            # Si hay clusters
            if isinstance(config[algoritmo][indicacion], dict):
                if algoritmo == 'GMM' and indicacion == 'Antibacterial':
                    st.info("üìä El algoritmo GMM agrup√≥ los f√°rmacos en varios clusters y, en todos ellos, la indicaci√≥n m√°s frecuente fue **Antibacterial**. "
                            "Por ello, se entrenaron modelos independientes para **Cluster 0** y **Cluster 1**.")
                elif algoritmo == 'KMeans' and indicacion == 'Antibacterial':
                    st.info("üìä En este caso, KMeans form√≥ varios agrupamientos donde la indicaci√≥n m√°s com√∫n en ambos fue **Antibacterial**. "
                            "Por eso, dispones de modelos separados para ambos.")
                elif algoritmo == 'KMeans' and indicacion == 'Antipsychotic':
                    st.info("üìä Solo se detect√≥ un agrupamiento relevante para antipsic√≥ticos mediante KMeans: **Cluster 2**.")

                cluster_options = list(config[algoritmo][indicacion].keys())
                selected_cluster = st.selectbox("üß© Selecciona el agrupamiento (cluster):", [""] + cluster_options)

            # Bot√≥n para lanzar predicci√≥n (solo aparece si ya est√° todo elegido)
            if (not isinstance(config[algoritmo][indicacion], dict)) or (selected_cluster):
                # Mensaje antes del bot√≥n
                st.markdown("### ‚ñ∂Ô∏è Pulsa el bot√≥n para ver la predicci√≥n")
                if st.button("üöÄ Realizar predicci√≥n"):
                    if isinstance(config[algoritmo][indicacion], dict):
                        model_file = config[algoritmo][indicacion][selected_cluster]
                    else:
                        model_file = config[algoritmo][indicacion]

                    # Aqu√≠ cargamos desde la carpeta 'modelos/'
                    model_path = os.path.join("modelos", model_file)
                    clf = joblib.load(model_path)
                    st.write(f"üì¶ Modelo cargado: {model_file}")

                    prediction = clf.predict(X)[0]

                    st.markdown("---")
                    drug_name = drug_data['Name'].values[0]
                    if prediction == 1:
                        st.success(f"‚úÖ {drug_name} podr√≠a tener actividad **{indicacion}**.")
                    else:
                        st.error(f"‚ùå {drug_name} NO parece **{indicacion}**.")